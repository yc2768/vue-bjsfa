运行vue3 项目
npm run serve

安装插件  安装UI库适合下面操作
vue add vuetify

vue3 运行单独一个.vue文件
1.npm install -g @vue/cli-service-global
2.vue serve  About.vue

vue 安装输入框校验插件
npm  install vee-validate --save
引入到main.js中去
import VeeValidate from 'vee-validate';
Vue.use(VeeValidate);


安装mint-ui
npm install mint-ui -S
在main.js中
// 引入mint ui的样式
import 'mint-ui/lib/style.css';
// 引入全部组件
import Mint from 'mint-ui';
Vue.use(Mint);
// 按需引入部分组件
import { Cell, Checklist } from 'minu-ui';
Vue.component(Cell.name, Cell);
Vue.component(Checklist.name, Checklist);
按需引入
借助 babel-plugin-component，我们可以只引入需要的组件，以达到减小项目体积的目的。
首先，安装 babel-plugin-component：
npm install babel-plugin-component -D
vue2中
然后，将 .babelrc 修改为：
{
  "presets": [
    ["env", { "modules": false }]
  ],
  "plugins": [["component",
    {
      "libraryName": "mint-ui",
      "style": true
    }
   ]]
}

vue3 在babel.config.js中如下配置
 module.exports = {
   presets: ["@vue/app"],
     plugins: [
         [
             "component",
             {
                 libraryName: "mint-ui",
                 style: true
             }
         ]
     ]
 };

如果你只希望引入部分组件，比如 Button 和 Cell，那么需要在 main.js 中写入以下内容：
import Vue from 'vue'
import { Button, Cell } from 'mint-ui'
import App from './App.vue'

Vue.component(Button.name, Button)
Vue.component(Cell.name, Cell)
/* 或写为
 * Vue.use(Button)
 * Vue.use(Cell)
 */

new Vue({
  el: '#app',
  components: { App }
})



在Login.Vue中使用
在script中导入
import { Indicator } from 'mint-ui';
在登录方法中调用加载转圈
Indicator.open("正在登录...");


在Vue中安装axios
npm install axios --save
http://yapi.demo.qunar.com/  设置后台API网站要返回的字段
https://github.com/YMFE/yapi   不用写后台也可以写前端，而且可以本地部署开源





在vscode安装目录新建vscode-extensions目录
在快捷方式中配置
"D:\Program Files\Microsoft VS Code\Code.exe" --extensions-dir "D:\Program Files\Microsoft VS Code\vscode-extensions"

vscode 配置sass编辑
npm install sass -g
由于 Sass 的编译依赖 Ruby 环境，因此我们在开始之前首先得安装 Ruby，别担心，装 Ruby 只是为了提供运行环境，不懂 Ruby 没任何关系。官网下载传送门
安装 Ruby 时一定要勾选 Add Ruby executables to your PATH，用来将 Ruby 添加到系统变量，这样后续可以省却很多不必要的麻烦。装好后在命令行输入 gem sass 来安装 Sass，安装完成后启动 VSCode，在拓展商店里搜索“easy sass”，并安装，安装成功后重启 VSCode。
接下来进行配置。在 VSCode 菜单栏依次点击“文件 首选项 设置”，打开 settings.json 全局配置文件。搜索“easysass”，然后把 easysass 相关的设置项复制到右侧的用户设置编辑窗口中，再根据实际情况修改配置项。
注意这里的配置项是全局的，不是只针对当前 VSCode 中打开的项目。换句话说，如果你在 VSCode 中切换了项目，应按实际情况再次调整 easysass 的配置项。
所有的默认配置项如下：
"easysass.compileAfterSave": true,

"easysass.excludeRegex": "",

"easysass.formats": [
    {
      "format": "expanded",
      "extension": ".css"
    },
    {
      "format": "compressed",
      "extension": ".min.css"
    }
],

"easysass.targetDir": ""
easysass.compileAfterSave 保存 scss 或 sass 文件后自动进行编译。默认为 true。一般设为 true，可提高工作效率，如果项目中有不直接编译的文件，例如 variable.scss、theme.scss、mixin.scss 等，建议设为 false，避免这类文件编辑保存后被编译为无效 css 需要手动删除的尴尬。
easysass.excludeRegex 提供一个文件名的正则表达式，匹配的文件会被排除，不会被编译成 css。默认为空，即该功能关闭。个人建议将一些不直接编译的文件以下划线开头命名，例如：mixin.scss，然后设置：`"easysass.excludeRegex": "^+"`，即可排除所有以下划线开头的 scss/sass 文件。
easysass.formats 定义输出 css 文件的排版风格和文件名，是一个数组，可以同时编译输出多个不同风格、文件名的 css 文件。每个数组对象中有两个参数：
easysass.formats[i].format 用以编译生成对应风格的 css，参数值如下：
nested：嵌套缩进的 css 代码。
expanded：没有缩进的、扩展的css代码。
compact：简洁格式的 css 代码。
compressed：压缩后的 css 代码。
easysass.formats[i].extension 顾名思义就是设置编译输出的文件拓展名了，此处可以自定义文件名，输出的 css 文件名会按照“当前 Sass 文件名（不含拓展名）+此处自定义文件名”的格式来生成。
例如：设置 "easysass.formats[i].extension": ".min.css"，假设当前的 Sass 文件名为
style.scss，则编译输出的 css 文件名为 style.min.css。
easysass.targetDir 我们在生产环境中很多情况下 scss/sass 文件和 css 文件是不在同一个目录下的，而 Easy Sass 默认输出的 css 是和当前 Sass 文件处于相同目录的，为此我们需要通过该参数来配置输出路径。
参数值可以是绝对路径或相对路径。如果是相对路径，则以 VSCode 当前打开的项目的根目录为基准。
例如：设置 easysass.targetDir 为 "./css/"，此时保存修改完毕的 Sass 文件，VSCode 会自动编译并在当前 Sass 文件的上级文件夹 css 目录下输出生成 css 文件（见下图）。
例如下图的文件结构，项目根目录是 TEST 文件夹，scss 文件存放于 sass 文件夹，编译输出目录是 css 文件，则配置为："easysass.targetDir": "css/"（"css" 后面的斜线也可省略）。


实时编译sass文件
新建一个sasslear目录在里面建一个dist目录一个sass目录
再npm init -s
编辑package.js
{
  "name": "sasslearn",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
     "dev":"sass --watch sass:dist"
  },
  "author": "yc",
  "license": "ISC"
}

npm run dev



新建service目录新建index.js用于网络请求的封装